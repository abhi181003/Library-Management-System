--------------------------------------------------------
--  File created - Wednesday-December-06-2023   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence BOOKS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ASSIGNMENT2"."BOOKS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence ISSUERETURNS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ASSIGNMENT2"."ISSUERETURNS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence ISSUES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ASSIGNMENT2"."ISSUES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence RESERVATIONS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ASSIGNMENT2"."RESERVATIONS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence STUDENTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ASSIGNMENT2"."STUDENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table BOOKS
--------------------------------------------------------

  CREATE TABLE "ASSIGNMENT2"."BOOKS" 
   (	"BOOKNO" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ISBN" NUMBER(13,0), 
	"NAME" VARCHAR2(100 BYTE), 
	"AUTHOR" VARCHAR2(50 BYTE), 
	"PUBLISHER" VARCHAR2(50 BYTE), 
	"COPIES" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ISSUERETURNS
--------------------------------------------------------

  CREATE TABLE "ASSIGNMENT2"."ISSUERETURNS" 
   (	"RETURNID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"BOOKNO" NUMBER, 
	"STUDENTID" NUMBER, 
	"ISSUEDATE" DATE, 
	"DUEDATE" DATE, 
	"RETURNDATE" DATE, 
	"FINE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ISSUES
--------------------------------------------------------

  CREATE TABLE "ASSIGNMENT2"."ISSUES" 
   (	"ISSUEID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"STUDENTID" NUMBER, 
	"BOOKNO" NUMBER, 
	"ISSUEDATE" DATE, 
	"DUEDATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ISSUES_HISTORY
--------------------------------------------------------

  CREATE TABLE "ASSIGNMENT2"."ISSUES_HISTORY" 
   (	"ISSUEID" NUMBER, 
	"STUDENTID" NUMBER, 
	"BOOKNO" NUMBER, 
	"ISSUEDATE" DATE, 
	"DUEDATE" DATE, 
	"STARTDATE" TIMESTAMP (6), 
	"ENDDATE" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table RESERVATIONS
--------------------------------------------------------

  CREATE TABLE "ASSIGNMENT2"."RESERVATIONS" 
   (	"RESERVATIONID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"STUDENTID" NUMBER, 
	"BOOKNO" NUMBER, 
	"RESERVATIONDATE" DATE, 
	"STATUS" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table RESERVATIONS_HISTORY
--------------------------------------------------------

  CREATE TABLE "ASSIGNMENT2"."RESERVATIONS_HISTORY" 
   (	"RESERVATIONID" NUMBER, 
	"STUDENTID" NUMBER, 
	"BOOKNO" NUMBER, 
	"RESERVATIONDATE" DATE, 
	"STATUS" VARCHAR2(20 BYTE), 
	"STARTDATE" TIMESTAMP (6), 
	"ENDDATE" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table STUDENTS
--------------------------------------------------------

  CREATE TABLE "ASSIGNMENT2"."STUDENTS" 
   (	"STUDENTID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FIRSTNAME" VARCHAR2(25 BYTE), 
	"LASTNAME" VARCHAR2(25 BYTE), 
	"EMAIL" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table STUDENTS_HISTORY
--------------------------------------------------------

  CREATE TABLE "ASSIGNMENT2"."STUDENTS_HISTORY" 
   (	"STUDENTID" NUMBER, 
	"FIRSTNAME" VARCHAR2(25 BYTE), 
	"LASTNAME" VARCHAR2(25 BYTE), 
	"EMAIL" VARCHAR2(50 BYTE), 
	"STARTDATE" TIMESTAMP (6), 
	"ENDDATE" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for View ISSUES_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "ASSIGNMENT2"."ISSUES_VIEW" ("ISSUEID", "STUDENTID", "BOOKNO", "ISSUEDATE", "DUEDATE", "STARTDATE", "ENDDATE") AS 
  SELECT i.IssueID, i.StudentID, i.BookNo, i.IssueDate, i.DueDate, h.StartDate, h.EndDate
FROM Issues i
LEFT JOIN Issues_History h ON i.IssueID = h.IssueID
WHERE h.EndDate IS NULL OR h.EndDate = (SELECT MAX(EndDate) FROM Issues_History WHERE IssueID = i.IssueID)
;
--------------------------------------------------------
--  DDL for View RESERVATIONS_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "ASSIGNMENT2"."RESERVATIONS_VIEW" ("RESERVATIONID", "STUDENTID", "BOOKNO", "RESERVATIONDATE", "STATUS", "STARTDATE", "ENDDATE") AS 
  SELECT r.ReservationID, r.StudentID, r.BookNo, r.ReservationDate, r.Status, h.StartDate, h.EndDate
FROM Reservations r
LEFT JOIN Reservations_History h ON r.ReservationID = h.ReservationID
WHERE h.EndDate IS NULL OR h.EndDate = (SELECT MAX(EndDate) FROM Reservations_History WHERE ReservationID = r.ReservationID)
;
--------------------------------------------------------
--  DDL for View STUDENTS_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "ASSIGNMENT2"."STUDENTS_VIEW" ("STUDENTID", "FIRSTNAME", "LASTNAME", "EMAIL", "STARTDATE", "ENDDATE") AS 
  SELECT s.StudentID, s.FirstName, s.LastName, s.Email, h.StartDate, h.EndDate
FROM Students s
LEFT JOIN Students_History h ON s.StudentID = h.StudentID
WHERE h.EndDate IS NULL OR h.EndDate = (SELECT MAX(EndDate) FROM Students_History WHERE StudentID = s.StudentID)
;
REM INSERTING into ASSIGNMENT2.BOOKS
SET DEFINE OFF;
Insert into ASSIGNMENT2.BOOKS (BOOKNO,ISBN,NAME,AUTHOR,PUBLISHER,COPIES) values (1,1234567890123,'Introduction to SQL','John Smith','Tech Publishing',100);
Insert into ASSIGNMENT2.BOOKS (BOOKNO,ISBN,NAME,AUTHOR,PUBLISHER,COPIES) values (2,9876543210987,'Python Programming','Alice Johnson','Code Books',50);
Insert into ASSIGNMENT2.BOOKS (BOOKNO,ISBN,NAME,AUTHOR,PUBLISHER,COPIES) values (3,5555555555555,'Data Structures and Algorithms','Bob Williams','Tech Books',75);
Insert into ASSIGNMENT2.BOOKS (BOOKNO,ISBN,NAME,AUTHOR,PUBLISHER,COPIES) values (4,1111222233334,'Web Development Basics','Jane Brown','Web Publications',60);
Insert into ASSIGNMENT2.BOOKS (BOOKNO,ISBN,NAME,AUTHOR,PUBLISHER,COPIES) values (5,9999888877776,'Machine Learning Essentials','Charlie Davis','ML Books',40);
Insert into ASSIGNMENT2.BOOKS (BOOKNO,ISBN,NAME,AUTHOR,PUBLISHER,COPIES) values (6,6666777788885,'Network Security','Eva White','Secure Publishing',30);
Insert into ASSIGNMENT2.BOOKS (BOOKNO,ISBN,NAME,AUTHOR,PUBLISHER,COPIES) values (7,4444555566667,'JavaScript Fundamentals','David Moore','JS Books',80);
Insert into ASSIGNMENT2.BOOKS (BOOKNO,ISBN,NAME,AUTHOR,PUBLISHER,COPIES) values (8,7777666655558,'Artificial Intelligence','Grace Anderson','AI Publications',25);
Insert into ASSIGNMENT2.BOOKS (BOOKNO,ISBN,NAME,AUTHOR,PUBLISHER,COPIES) values (9,8888999912345,'Mobile App Development','Frank Martin','Mobile Books',45);
Insert into ASSIGNMENT2.BOOKS (BOOKNO,ISBN,NAME,AUTHOR,PUBLISHER,COPIES) values (10,3333444455556,'Database Management','Helen Taylor','DB Press',55);
REM INSERTING into ASSIGNMENT2.ISSUERETURNS
SET DEFINE OFF;
Insert into ASSIGNMENT2.ISSUERETURNS (RETURNID,BOOKNO,STUDENTID,ISSUEDATE,DUEDATE,RETURNDATE,FINE) values (1,1,1,to_date('23-01-01','RR-MM-DD'),to_date('23-01-15','RR-MM-DD'),to_date('23-01-10','RR-MM-DD'),5);
Insert into ASSIGNMENT2.ISSUERETURNS (RETURNID,BOOKNO,STUDENTID,ISSUEDATE,DUEDATE,RETURNDATE,FINE) values (2,3,2,to_date('23-02-01','RR-MM-DD'),to_date('23-02-15','RR-MM-DD'),to_date('23-02-10','RR-MM-DD'),3.5);
Insert into ASSIGNMENT2.ISSUERETURNS (RETURNID,BOOKNO,STUDENTID,ISSUEDATE,DUEDATE,RETURNDATE,FINE) values (3,5,3,to_date('23-03-01','RR-MM-DD'),to_date('23-03-15','RR-MM-DD'),to_date('23-03-10','RR-MM-DD'),4);
Insert into ASSIGNMENT2.ISSUERETURNS (RETURNID,BOOKNO,STUDENTID,ISSUEDATE,DUEDATE,RETURNDATE,FINE) values (4,7,4,to_date('23-04-01','RR-MM-DD'),to_date('23-04-15','RR-MM-DD'),to_date('23-04-10','RR-MM-DD'),2.5);
Insert into ASSIGNMENT2.ISSUERETURNS (RETURNID,BOOKNO,STUDENTID,ISSUEDATE,DUEDATE,RETURNDATE,FINE) values (5,2,5,to_date('23-05-01','RR-MM-DD'),to_date('23-05-15','RR-MM-DD'),to_date('23-05-10','RR-MM-DD'),6);
Insert into ASSIGNMENT2.ISSUERETURNS (RETURNID,BOOKNO,STUDENTID,ISSUEDATE,DUEDATE,RETURNDATE,FINE) values (6,4,6,to_date('23-06-01','RR-MM-DD'),to_date('23-06-15','RR-MM-DD'),to_date('23-06-10','RR-MM-DD'),1.5);
Insert into ASSIGNMENT2.ISSUERETURNS (RETURNID,BOOKNO,STUDENTID,ISSUEDATE,DUEDATE,RETURNDATE,FINE) values (7,6,7,to_date('23-07-01','RR-MM-DD'),to_date('23-07-15','RR-MM-DD'),to_date('23-07-10','RR-MM-DD'),7);
Insert into ASSIGNMENT2.ISSUERETURNS (RETURNID,BOOKNO,STUDENTID,ISSUEDATE,DUEDATE,RETURNDATE,FINE) values (8,8,8,to_date('23-08-01','RR-MM-DD'),to_date('23-08-15','RR-MM-DD'),to_date('23-08-10','RR-MM-DD'),8.5);
Insert into ASSIGNMENT2.ISSUERETURNS (RETURNID,BOOKNO,STUDENTID,ISSUEDATE,DUEDATE,RETURNDATE,FINE) values (9,10,9,to_date('23-09-01','RR-MM-DD'),to_date('23-09-15','RR-MM-DD'),to_date('23-09-10','RR-MM-DD'),2);
Insert into ASSIGNMENT2.ISSUERETURNS (RETURNID,BOOKNO,STUDENTID,ISSUEDATE,DUEDATE,RETURNDATE,FINE) values (10,9,10,to_date('23-10-01','RR-MM-DD'),to_date('23-10-15','RR-MM-DD'),to_date('23-10-10','RR-MM-DD'),4.5);
REM INSERTING into ASSIGNMENT2.ISSUES
SET DEFINE OFF;
Insert into ASSIGNMENT2.ISSUES (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE) values (21,11,10,to_date('23-12-06','RR-MM-DD'),to_date('23-12-13','RR-MM-DD'));
Insert into ASSIGNMENT2.ISSUES (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE) values (1,1,1,to_date('23-01-01','RR-MM-DD'),to_date('23-01-15','RR-MM-DD'));
Insert into ASSIGNMENT2.ISSUES (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE) values (2,2,3,to_date('23-02-01','RR-MM-DD'),to_date('23-02-15','RR-MM-DD'));
Insert into ASSIGNMENT2.ISSUES (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE) values (3,3,5,to_date('23-03-01','RR-MM-DD'),to_date('23-03-15','RR-MM-DD'));
Insert into ASSIGNMENT2.ISSUES (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE) values (4,4,7,to_date('23-04-01','RR-MM-DD'),to_date('23-04-15','RR-MM-DD'));
Insert into ASSIGNMENT2.ISSUES (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE) values (5,5,2,to_date('23-05-01','RR-MM-DD'),to_date('23-05-15','RR-MM-DD'));
Insert into ASSIGNMENT2.ISSUES (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE) values (6,6,4,to_date('23-06-01','RR-MM-DD'),to_date('23-06-15','RR-MM-DD'));
Insert into ASSIGNMENT2.ISSUES (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE) values (7,7,6,to_date('23-07-01','RR-MM-DD'),to_date('23-07-15','RR-MM-DD'));
Insert into ASSIGNMENT2.ISSUES (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE) values (8,8,8,to_date('23-08-01','RR-MM-DD'),to_date('23-08-15','RR-MM-DD'));
Insert into ASSIGNMENT2.ISSUES (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE) values (9,9,10,to_date('23-09-01','RR-MM-DD'),to_date('23-09-15','RR-MM-DD'));
Insert into ASSIGNMENT2.ISSUES (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE) values (10,10,9,to_date('23-10-01','RR-MM-DD'),to_date('23-10-15','RR-MM-DD'));
REM INSERTING into ASSIGNMENT2.ISSUES_HISTORY
SET DEFINE OFF;
Insert into ASSIGNMENT2.ISSUES_HISTORY (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE,STARTDATE,ENDDATE) values (21,11,10,to_date('23-12-06','RR-MM-DD'),to_date('23-12-13','RR-MM-DD'),to_timestamp('23-12-06 15:59:35.704000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.ISSUES_HISTORY (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE,STARTDATE,ENDDATE) values (1,1,1,to_date('23-01-01','RR-MM-DD'),to_date('23-01-15','RR-MM-DD'),to_timestamp('23-12-04 20:57:07.843000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.ISSUES_HISTORY (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE,STARTDATE,ENDDATE) values (2,2,3,to_date('23-02-01','RR-MM-DD'),to_date('23-02-15','RR-MM-DD'),to_timestamp('23-12-04 20:57:07.848000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.ISSUES_HISTORY (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE,STARTDATE,ENDDATE) values (3,3,5,to_date('23-03-01','RR-MM-DD'),to_date('23-03-15','RR-MM-DD'),to_timestamp('23-12-04 20:57:07.853000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.ISSUES_HISTORY (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE,STARTDATE,ENDDATE) values (4,4,7,to_date('23-04-01','RR-MM-DD'),to_date('23-04-15','RR-MM-DD'),to_timestamp('23-12-04 20:57:07.856000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.ISSUES_HISTORY (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE,STARTDATE,ENDDATE) values (5,5,2,to_date('23-05-01','RR-MM-DD'),to_date('23-05-15','RR-MM-DD'),to_timestamp('23-12-04 20:57:07.859000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.ISSUES_HISTORY (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE,STARTDATE,ENDDATE) values (6,6,4,to_date('23-06-01','RR-MM-DD'),to_date('23-06-15','RR-MM-DD'),to_timestamp('23-12-04 20:57:07.863000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.ISSUES_HISTORY (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE,STARTDATE,ENDDATE) values (7,7,6,to_date('23-07-01','RR-MM-DD'),to_date('23-07-15','RR-MM-DD'),to_timestamp('23-12-04 20:57:07.867000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.ISSUES_HISTORY (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE,STARTDATE,ENDDATE) values (8,8,8,to_date('23-08-01','RR-MM-DD'),to_date('23-08-15','RR-MM-DD'),to_timestamp('23-12-04 20:57:07.870000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.ISSUES_HISTORY (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE,STARTDATE,ENDDATE) values (9,9,10,to_date('23-09-01','RR-MM-DD'),to_date('23-09-15','RR-MM-DD'),to_timestamp('23-12-04 20:57:07.875000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.ISSUES_HISTORY (ISSUEID,STUDENTID,BOOKNO,ISSUEDATE,DUEDATE,STARTDATE,ENDDATE) values (10,10,9,to_date('23-10-01','RR-MM-DD'),to_date('23-10-15','RR-MM-DD'),to_timestamp('23-12-04 20:57:07.877000000','RR-MM-DD HH24:MI:SSXFF'),null);
REM INSERTING into ASSIGNMENT2.RESERVATIONS
SET DEFINE OFF;
Insert into ASSIGNMENT2.RESERVATIONS (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS) values (21,11,10,to_date('23-12-06','RR-MM-DD'),'pending');
Insert into ASSIGNMENT2.RESERVATIONS (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS) values (1,1,1,to_date('23-01-01','RR-MM-DD'),'Pending');
Insert into ASSIGNMENT2.RESERVATIONS (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS) values (2,2,3,to_date('23-02-01','RR-MM-DD'),'Confirmed');
Insert into ASSIGNMENT2.RESERVATIONS (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS) values (3,3,5,to_date('23-03-01','RR-MM-DD'),'Pending');
Insert into ASSIGNMENT2.RESERVATIONS (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS) values (4,4,7,to_date('23-04-01','RR-MM-DD'),'Confirmed');
Insert into ASSIGNMENT2.RESERVATIONS (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS) values (5,5,2,to_date('23-05-01','RR-MM-DD'),'Pending');
Insert into ASSIGNMENT2.RESERVATIONS (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS) values (6,6,4,to_date('23-06-01','RR-MM-DD'),'Confirmed');
Insert into ASSIGNMENT2.RESERVATIONS (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS) values (7,7,6,to_date('23-07-01','RR-MM-DD'),'Pending');
Insert into ASSIGNMENT2.RESERVATIONS (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS) values (8,8,8,to_date('23-08-01','RR-MM-DD'),'Confirmed');
Insert into ASSIGNMENT2.RESERVATIONS (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS) values (9,9,10,to_date('23-09-01','RR-MM-DD'),'Pending');
Insert into ASSIGNMENT2.RESERVATIONS (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS) values (10,10,9,to_date('23-10-01','RR-MM-DD'),'Confirmed');
REM INSERTING into ASSIGNMENT2.RESERVATIONS_HISTORY
SET DEFINE OFF;
Insert into ASSIGNMENT2.RESERVATIONS_HISTORY (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS,STARTDATE,ENDDATE) values (21,11,10,to_date('23-12-06','RR-MM-DD'),'pending',to_timestamp('23-12-06 15:56:22.876000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.RESERVATIONS_HISTORY (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS,STARTDATE,ENDDATE) values (1,1,1,to_date('23-01-01','RR-MM-DD'),'Pending',to_timestamp('23-12-04 20:57:07.931000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.RESERVATIONS_HISTORY (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS,STARTDATE,ENDDATE) values (2,2,3,to_date('23-02-01','RR-MM-DD'),'Confirmed',to_timestamp('23-12-04 20:57:07.936000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.RESERVATIONS_HISTORY (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS,STARTDATE,ENDDATE) values (3,3,5,to_date('23-03-01','RR-MM-DD'),'Pending',to_timestamp('23-12-04 20:57:07.939000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.RESERVATIONS_HISTORY (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS,STARTDATE,ENDDATE) values (4,4,7,to_date('23-04-01','RR-MM-DD'),'Confirmed',to_timestamp('23-12-04 20:57:07.944000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.RESERVATIONS_HISTORY (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS,STARTDATE,ENDDATE) values (5,5,2,to_date('23-05-01','RR-MM-DD'),'Pending',to_timestamp('23-12-04 20:57:07.949000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.RESERVATIONS_HISTORY (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS,STARTDATE,ENDDATE) values (6,6,4,to_date('23-06-01','RR-MM-DD'),'Confirmed',to_timestamp('23-12-04 20:57:07.951000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.RESERVATIONS_HISTORY (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS,STARTDATE,ENDDATE) values (7,7,6,to_date('23-07-01','RR-MM-DD'),'Pending',to_timestamp('23-12-04 20:57:07.954000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.RESERVATIONS_HISTORY (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS,STARTDATE,ENDDATE) values (8,8,8,to_date('23-08-01','RR-MM-DD'),'Confirmed',to_timestamp('23-12-04 20:57:07.957000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.RESERVATIONS_HISTORY (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS,STARTDATE,ENDDATE) values (9,9,10,to_date('23-09-01','RR-MM-DD'),'Pending',to_timestamp('23-12-04 20:57:07.961000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.RESERVATIONS_HISTORY (RESERVATIONID,STUDENTID,BOOKNO,RESERVATIONDATE,STATUS,STARTDATE,ENDDATE) values (10,10,9,to_date('23-10-01','RR-MM-DD'),'Confirmed',to_timestamp('23-12-04 20:57:07.964000000','RR-MM-DD HH24:MI:SSXFF'),null);
REM INSERTING into ASSIGNMENT2.STUDENTS
SET DEFINE OFF;
Insert into ASSIGNMENT2.STUDENTS (STUDENTID,FIRSTNAME,LASTNAME,EMAIL) values (1,'John','Doe','john.doe@example.com');
Insert into ASSIGNMENT2.STUDENTS (STUDENTID,FIRSTNAME,LASTNAME,EMAIL) values (2,'Jane','Smith','jane.smith@example.com');
Insert into ASSIGNMENT2.STUDENTS (STUDENTID,FIRSTNAME,LASTNAME,EMAIL) values (3,'Bob','Johnson','bob.johnson@example.com');
Insert into ASSIGNMENT2.STUDENTS (STUDENTID,FIRSTNAME,LASTNAME,EMAIL) values (4,'Alice','Williams','alice.williams@example.com');
Insert into ASSIGNMENT2.STUDENTS (STUDENTID,FIRSTNAME,LASTNAME,EMAIL) values (5,'Charlie','Brown','charlie.brown@example.com');
Insert into ASSIGNMENT2.STUDENTS (STUDENTID,FIRSTNAME,LASTNAME,EMAIL) values (6,'Eva','Clark','eva.clark@example.com');
Insert into ASSIGNMENT2.STUDENTS (STUDENTID,FIRSTNAME,LASTNAME,EMAIL) values (7,'David','Miller','david.miller@example.com');
Insert into ASSIGNMENT2.STUDENTS (STUDENTID,FIRSTNAME,LASTNAME,EMAIL) values (8,'Grace','Moore','grace.moore@example.com');
Insert into ASSIGNMENT2.STUDENTS (STUDENTID,FIRSTNAME,LASTNAME,EMAIL) values (9,'Frank','Anderson','frank.anderson@example.com');
Insert into ASSIGNMENT2.STUDENTS (STUDENTID,FIRSTNAME,LASTNAME,EMAIL) values (10,'Helen','Martin','helen.martin@example.com');
Insert into ASSIGNMENT2.STUDENTS (STUDENTID,FIRSTNAME,LASTNAME,EMAIL) values (11,'ayush','kapoor','dfghbjn@gmail.com');
REM INSERTING into ASSIGNMENT2.STUDENTS_HISTORY
SET DEFINE OFF;
Insert into ASSIGNMENT2.STUDENTS_HISTORY (STUDENTID,FIRSTNAME,LASTNAME,EMAIL,STARTDATE,ENDDATE) values (1,'John','Doe','john.doe@example.com',to_timestamp('23-12-04 20:57:07.758000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.STUDENTS_HISTORY (STUDENTID,FIRSTNAME,LASTNAME,EMAIL,STARTDATE,ENDDATE) values (2,'Jane','Smith','jane.smith@example.com',to_timestamp('23-12-04 20:57:07.764000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.STUDENTS_HISTORY (STUDENTID,FIRSTNAME,LASTNAME,EMAIL,STARTDATE,ENDDATE) values (3,'Bob','Johnson','bob.johnson@example.com',to_timestamp('23-12-04 20:57:07.769000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.STUDENTS_HISTORY (STUDENTID,FIRSTNAME,LASTNAME,EMAIL,STARTDATE,ENDDATE) values (4,'Alice','Williams','alice.williams@example.com',to_timestamp('23-12-04 20:57:07.772000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.STUDENTS_HISTORY (STUDENTID,FIRSTNAME,LASTNAME,EMAIL,STARTDATE,ENDDATE) values (5,'Charlie','Brown','charlie.brown@example.com',to_timestamp('23-12-04 20:57:07.776000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.STUDENTS_HISTORY (STUDENTID,FIRSTNAME,LASTNAME,EMAIL,STARTDATE,ENDDATE) values (6,'Eva','Clark','eva.clark@example.com',to_timestamp('23-12-04 20:57:07.780000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.STUDENTS_HISTORY (STUDENTID,FIRSTNAME,LASTNAME,EMAIL,STARTDATE,ENDDATE) values (7,'David','Miller','david.miller@example.com',to_timestamp('23-12-04 20:57:07.784000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.STUDENTS_HISTORY (STUDENTID,FIRSTNAME,LASTNAME,EMAIL,STARTDATE,ENDDATE) values (8,'Grace','Moore','grace.moore@example.com',to_timestamp('23-12-04 20:57:07.788000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.STUDENTS_HISTORY (STUDENTID,FIRSTNAME,LASTNAME,EMAIL,STARTDATE,ENDDATE) values (9,'Frank','Anderson','frank.anderson@example.com',to_timestamp('23-12-04 20:57:07.792000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.STUDENTS_HISTORY (STUDENTID,FIRSTNAME,LASTNAME,EMAIL,STARTDATE,ENDDATE) values (10,'Helen','Martin','helen.martin@example.com',to_timestamp('23-12-04 20:57:07.795000000','RR-MM-DD HH24:MI:SSXFF'),null);
Insert into ASSIGNMENT2.STUDENTS_HISTORY (STUDENTID,FIRSTNAME,LASTNAME,EMAIL,STARTDATE,ENDDATE) values (11,'ayush','kapoor','dfghbjn@gmail.com',to_timestamp('23-12-04 21:01:27.064000000','RR-MM-DD HH24:MI:SSXFF'),null);
--------------------------------------------------------
--  DDL for Trigger BOOKS_AUTO_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ASSIGNMENT2"."BOOKS_AUTO_ID" 
BEFORE INSERT ON Books FOR EACH ROW
BEGIN
  SELECT books_seq.NEXTVAL INTO :new.BookNo FROM dual;
END;

/
ALTER TRIGGER "ASSIGNMENT2"."BOOKS_AUTO_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ISSUERETURNS_AUTO_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ASSIGNMENT2"."ISSUERETURNS_AUTO_ID" 
BEFORE INSERT ON IssueReturns FOR EACH ROW
BEGIN
  SELECT issuereturns_seq.NEXTVAL INTO :new.ReturnID FROM dual;
END;

/
ALTER TRIGGER "ASSIGNMENT2"."ISSUERETURNS_AUTO_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ISSUES_AUTO_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ASSIGNMENT2"."ISSUES_AUTO_ID" 
BEFORE INSERT ON Issues FOR EACH ROW
BEGIN
  SELECT issues_seq.NEXTVAL INTO :new.IssueID FROM dual;
END;

/
ALTER TRIGGER "ASSIGNMENT2"."ISSUES_AUTO_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger RESERVATIONS_AUTO_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ASSIGNMENT2"."RESERVATIONS_AUTO_ID" 
BEFORE INSERT ON Reservations FOR EACH ROW
BEGIN
  SELECT reservations_seq.NEXTVAL INTO :new.ReservationID FROM dual;
END;

/
ALTER TRIGGER "ASSIGNMENT2"."RESERVATIONS_AUTO_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger STUDENTS_AUTO_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ASSIGNMENT2"."STUDENTS_AUTO_ID" 
BEFORE INSERT ON Students FOR EACH ROW
BEGIN
  SELECT students_seq.NEXTVAL INTO :new.StudentID FROM dual;
END;

/
ALTER TRIGGER "ASSIGNMENT2"."STUDENTS_AUTO_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_INSTEAD_ISSUES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ASSIGNMENT2"."TRG_INSTEAD_ISSUES" 
INSTEAD OF INSERT OR UPDATE OR DELETE ON Issues_View
FOR EACH ROW
DECLARE
    v_issueID INT;
BEGIN
    IF INSERTING THEN
        -- Insert new issue without specifying IssueID (auto-generated)
        INSERT INTO Issues (StudentID, BookNo, IssueDate, DueDate)
        VALUES (:new.StudentID, :new.BookNo, :new.IssueDate, :new.DueDate);

        -- Retrieve the auto-generated IssueID for the new record
        SELECT issues_seq.CURRVAL INTO v_issueID FROM dual;

        -- Insert historical record for Issues
        INSERT INTO Issues_History (IssueID, StudentID, BookNo, IssueDate, DueDate, StartDate, EndDate)
        VALUES (v_issueID, :new.StudentID, :new.BookNo, :new.IssueDate, :new.DueDate, SYSTIMESTAMP, NULL);

    ELSIF UPDATING THEN
        -- Update existing issue details
        UPDATE Issues
        SET StudentID = :new.StudentID,
            BookNo = :new.BookNo,
            IssueDate = :new.IssueDate,
            DueDate = :new.DueDate
        WHERE IssueID = :new.IssueID;

        -- Check and update Issues history if changed
        IF :new.StudentID != :old.StudentID OR :new.BookNo != :old.BookNo OR :new.IssueDate != :old.IssueDate OR :new.DueDate != :old.DueDate THEN
            -- Close the current history record
            UPDATE Issues_History
            SET EndDate = SYSTIMESTAMP
            WHERE IssueID = :old.IssueID AND EndDate IS NULL;

            -- Insert a new history record for Issues
            INSERT INTO Issues_History (IssueID, StudentID, BookNo, IssueDate, DueDate, StartDate, EndDate)
            VALUES (:old.IssueID, :new.StudentID, :new.BookNo, :new.IssueDate, :new.DueDate, SYSTIMESTAMP, NULL);
        END IF;

    ELSIF DELETING THEN
        -- Update the end time in Issues_History
        UPDATE Issues_History
        SET EndDate = SYSTIMESTAMP
        WHERE IssueID = :old.IssueID AND EndDate IS NULL;

    END IF;
END;

/
ALTER TRIGGER "ASSIGNMENT2"."TRG_INSTEAD_ISSUES" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_INSTEAD_RESERVATIONS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ASSIGNMENT2"."TRG_INSTEAD_RESERVATIONS" 
INSTEAD OF INSERT OR UPDATE OR DELETE ON Reservations_View
FOR EACH ROW
DECLARE
    v_reservationID INT;
BEGIN
    IF INSERTING THEN
        -- Insert new reservation without specifying ReservationID (auto-generated)
        INSERT INTO Reservations (StudentID, BookNo, ReservationDate, Status)
        VALUES (:new.StudentID, :new.BookNo, :new.ReservationDate, :new.Status);

        -- Retrieve the auto-generated ReservationID for the new record
        SELECT reservations_seq.CURRVAL INTO v_reservationID FROM dual;

        -- Insert historical record for Reservations
        INSERT INTO Reservations_History (ReservationID, StudentID, BookNo, ReservationDate, Status, StartDate, EndDate)
        VALUES (v_reservationID, :new.StudentID, :new.BookNo, :new.ReservationDate, :new.Status, SYSTIMESTAMP, NULL);

    ELSIF UPDATING THEN
        -- Update existing reservation details
        UPDATE Reservations
        SET StudentID = :new.StudentID,
            BookNo = :new.BookNo,
            ReservationDate = :new.ReservationDate,
            Status = :new.Status
        WHERE ReservationID = :new.ReservationID;

        -- Check and update Reservations history if changed
        IF :new.StudentID != :old.StudentID OR :new.BookNo != :old.BookNo OR :new.ReservationDate != :old.ReservationDate OR :new.Status != :old.Status THEN
            -- Close the current history record
            UPDATE Reservations_History
            SET EndDate = SYSTIMESTAMP
            WHERE ReservationID = :old.ReservationID AND EndDate IS NULL;

            -- Insert a new history record for Reservations
            INSERT INTO Reservations_History (ReservationID, StudentID, BookNo, ReservationDate, Status, StartDate, EndDate)
            VALUES (:old.ReservationID, :new.StudentID, :new.BookNo, :new.ReservationDate, :new.Status, SYSTIMESTAMP, NULL);
        END IF;

    ELSIF DELETING THEN
        -- Update the end time in Reservations_History
        UPDATE Reservations_History
        SET EndDate = SYSTIMESTAMP
        WHERE ReservationID = :old.ReservationID AND EndDate IS NULL;

    END IF;
END;

/
ALTER TRIGGER "ASSIGNMENT2"."TRG_INSTEAD_RESERVATIONS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_INSTEAD_STUDENTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ASSIGNMENT2"."TRG_INSTEAD_STUDENTS" 
INSTEAD OF INSERT OR UPDATE OR DELETE ON Students_View
FOR EACH ROW
DECLARE
    v_studentID INT;
BEGIN
    IF INSERTING THEN
        -- Insert new student without specifying StudentID (auto-generated)
        INSERT INTO Students (FirstName, LastName, Email)
        VALUES (:new.FirstName, :new.LastName, :new.Email);

        -- Retrieve the auto-generated StudentID for the new record
        SELECT students_seq.CURRVAL INTO v_studentID FROM dual;

        -- Insert historical record for Students
        INSERT INTO Students_History (StudentID, FirstName, LastName, Email, StartDate, EndDate)
        VALUES (v_studentID, :new.FirstName, :new.LastName, :new.Email, SYSTIMESTAMP, NULL);

    ELSIF UPDATING THEN
        -- Update existing student details
        UPDATE Students
        SET FirstName = :new.FirstName,
            LastName = :new.LastName,
            Email = :new.Email
        WHERE StudentID = :new.StudentID;

        -- Check and update Students history if changed
        IF :new.FirstName != :old.FirstName OR :new.LastName != :old.LastName OR :new.Email != :old.Email THEN
            -- Close the current history record
            UPDATE Students_History
            SET EndDate = SYSTIMESTAMP
            WHERE StudentID = :old.StudentID AND EndDate IS NULL;

            -- Insert a new history record for Students
            INSERT INTO Students_History (StudentID, FirstName, LastName, Email, StartDate, EndDate)
            VALUES (:old.StudentID, :new.FirstName, :new.LastName, :new.Email, SYSTIMESTAMP, NULL);
        END IF;

    ELSIF DELETING THEN
        -- Update the end time in Students_History
        UPDATE Students_History
        SET EndDate = SYSTIMESTAMP
        WHERE StudentID = :old.StudentID AND EndDate IS NULL;

    END IF;
END;

/
ALTER TRIGGER "ASSIGNMENT2"."TRG_INSTEAD_STUDENTS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_ISSUES_HISTORY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ASSIGNMENT2"."TRG_ISSUES_HISTORY" 
AFTER INSERT OR UPDATE OF IssueDate, DueDate ON Issues
FOR EACH ROW
BEGIN
    INSERT INTO Issues_History (IssueID, StudentID, BookNo, IssueDate, DueDate, StartDate, EndDate)
    VALUES (:new.IssueID, :new.StudentID, :new.BookNo, :new.IssueDate, :new.DueDate, SYSTIMESTAMP, NULL);
END;

/
ALTER TRIGGER "ASSIGNMENT2"."TRG_ISSUES_HISTORY" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_RESERVATIONS_HISTORY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ASSIGNMENT2"."TRG_RESERVATIONS_HISTORY" 
AFTER INSERT OR UPDATE OF ReservationDate, Status ON Reservations
FOR EACH ROW
BEGIN
    INSERT INTO Reservations_History (ReservationID, StudentID, BookNo, ReservationDate, Status, StartDate, EndDate)
    VALUES (:new.ReservationID, :new.StudentID, :new.BookNo, :new.ReservationDate, :new.Status, SYSTIMESTAMP, NULL);
END;

/
ALTER TRIGGER "ASSIGNMENT2"."TRG_RESERVATIONS_HISTORY" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_STUDENTS_HISTORY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ASSIGNMENT2"."TRG_STUDENTS_HISTORY" 
AFTER INSERT OR UPDATE OF FirstName, LastName, Email ON Students
FOR EACH ROW
BEGIN
    INSERT INTO Students_History (StudentID, FirstName, LastName, Email, StartDate, EndDate)
    VALUES (:new.StudentID, :new.FirstName, :new.LastName, :new.Email, SYSTIMESTAMP, NULL);
END;

/
ALTER TRIGGER "ASSIGNMENT2"."TRG_STUDENTS_HISTORY" ENABLE;
--------------------------------------------------------
--  DDL for Procedure SP_ADDNEWSTUDENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ASSIGNMENT2"."SP_ADDNEWSTUDENT" (
    p_FirstName IN Students.FirstName%TYPE,
    p_LastName IN Students.LastName%TYPE,
    p_Email IN Students.Email%TYPE
) AS
BEGIN
    INSERT INTO Students (FirstName, LastName, Email)
    VALUES (p_FirstName, p_LastName, p_Email);
END sp_AddNewStudent;

/
--------------------------------------------------------
--  DDL for Procedure SP_MARKRESERVATIONASCONFIRMED
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ASSIGNMENT2"."SP_MARKRESERVATIONASCONFIRMED" (
    p_ReservationID IN Reservations.ReservationID%TYPE
) AS
BEGIN
    UPDATE Reservations
    SET Status = 'Confirmed'
    WHERE ReservationID = p_ReservationID;
END sp_MarkReservationAsConfirmed;

/
--------------------------------------------------------
--  DDL for Procedure SP_SCHEDULEISSUE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ASSIGNMENT2"."SP_SCHEDULEISSUE" (
    p_StudentID IN Issues.StudentID%TYPE,
    p_BookNo IN Issues.BookNo%TYPE,
    p_IssueDate IN Issues.IssueDate%TYPE,
    p_DueDate IN Issues.DueDate%TYPE
) AS
BEGIN
    INSERT INTO Issues (StudentID, BookNo, IssueDate, DueDate)
    VALUES (p_StudentID, p_BookNo, p_IssueDate, p_DueDate);
END sp_ScheduleIssue;

/
--------------------------------------------------------
--  Constraints for Table ISSUERETURNS
--------------------------------------------------------

  ALTER TABLE "ASSIGNMENT2"."ISSUERETURNS" MODIFY ("RETURNID" NOT NULL ENABLE);
  ALTER TABLE "ASSIGNMENT2"."ISSUERETURNS" ADD PRIMARY KEY ("RETURNID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table BOOKS
--------------------------------------------------------

  ALTER TABLE "ASSIGNMENT2"."BOOKS" MODIFY ("BOOKNO" NOT NULL ENABLE);
  ALTER TABLE "ASSIGNMENT2"."BOOKS" ADD PRIMARY KEY ("BOOKNO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ISSUES
--------------------------------------------------------

  ALTER TABLE "ASSIGNMENT2"."ISSUES" MODIFY ("ISSUEID" NOT NULL ENABLE);
  ALTER TABLE "ASSIGNMENT2"."ISSUES" ADD PRIMARY KEY ("ISSUEID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ISSUES_HISTORY
--------------------------------------------------------

  ALTER TABLE "ASSIGNMENT2"."ISSUES_HISTORY" ADD PRIMARY KEY ("ISSUEID", "STARTDATE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table STUDENTS
--------------------------------------------------------

  ALTER TABLE "ASSIGNMENT2"."STUDENTS" MODIFY ("STUDENTID" NOT NULL ENABLE);
  ALTER TABLE "ASSIGNMENT2"."STUDENTS" ADD PRIMARY KEY ("STUDENTID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table STUDENTS_HISTORY
--------------------------------------------------------

  ALTER TABLE "ASSIGNMENT2"."STUDENTS_HISTORY" ADD PRIMARY KEY ("STUDENTID", "STARTDATE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table RESERVATIONS_HISTORY
--------------------------------------------------------

  ALTER TABLE "ASSIGNMENT2"."RESERVATIONS_HISTORY" ADD PRIMARY KEY ("RESERVATIONID", "STARTDATE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table RESERVATIONS
--------------------------------------------------------

  ALTER TABLE "ASSIGNMENT2"."RESERVATIONS" MODIFY ("RESERVATIONID" NOT NULL ENABLE);
  ALTER TABLE "ASSIGNMENT2"."RESERVATIONS" ADD PRIMARY KEY ("RESERVATIONID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ISSUERETURNS
--------------------------------------------------------

  ALTER TABLE "ASSIGNMENT2"."ISSUERETURNS" ADD FOREIGN KEY ("BOOKNO")
	  REFERENCES "ASSIGNMENT2"."BOOKS" ("BOOKNO") ENABLE;
  ALTER TABLE "ASSIGNMENT2"."ISSUERETURNS" ADD FOREIGN KEY ("STUDENTID")
	  REFERENCES "ASSIGNMENT2"."STUDENTS" ("STUDENTID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ISSUES
--------------------------------------------------------

  ALTER TABLE "ASSIGNMENT2"."ISSUES" ADD FOREIGN KEY ("BOOKNO")
	  REFERENCES "ASSIGNMENT2"."BOOKS" ("BOOKNO") ENABLE;
  ALTER TABLE "ASSIGNMENT2"."ISSUES" ADD FOREIGN KEY ("STUDENTID")
	  REFERENCES "ASSIGNMENT2"."STUDENTS" ("STUDENTID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ISSUES_HISTORY
--------------------------------------------------------

  ALTER TABLE "ASSIGNMENT2"."ISSUES_HISTORY" ADD FOREIGN KEY ("ISSUEID")
	  REFERENCES "ASSIGNMENT2"."ISSUES" ("ISSUEID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table RESERVATIONS
--------------------------------------------------------

  ALTER TABLE "ASSIGNMENT2"."RESERVATIONS" ADD FOREIGN KEY ("STUDENTID")
	  REFERENCES "ASSIGNMENT2"."STUDENTS" ("STUDENTID") ENABLE;
  ALTER TABLE "ASSIGNMENT2"."RESERVATIONS" ADD FOREIGN KEY ("BOOKNO")
	  REFERENCES "ASSIGNMENT2"."BOOKS" ("BOOKNO") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table RESERVATIONS_HISTORY
--------------------------------------------------------

  ALTER TABLE "ASSIGNMENT2"."RESERVATIONS_HISTORY" ADD FOREIGN KEY ("RESERVATIONID")
	  REFERENCES "ASSIGNMENT2"."RESERVATIONS" ("RESERVATIONID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table STUDENTS_HISTORY
--------------------------------------------------------

  ALTER TABLE "ASSIGNMENT2"."STUDENTS_HISTORY" ADD FOREIGN KEY ("STUDENTID")
	  REFERENCES "ASSIGNMENT2"."STUDENTS" ("STUDENTID") ENABLE;
